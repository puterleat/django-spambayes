DjangoBayes
===========

The DjangoBayes app is the workhorse that gets Django and SpamBayes to talk 
to each other. It contains a Django model for SpamBayes to store its 'learned' 
data in and a SpamBayes ``Classifier`` subclass that wraps the Django model. 
This is all wrapped up in a SpamBayes ``Hammie`` instance 
(``djangobayes.filter.filter``) which contains the public API accessed by 
other apps. 

Setup:
------

First follow the instructions in ``INSTALL.txt`` and make sure 
``djangobayes.py`` is on your ``PYHTONPATH``.

Add ``djangobayes`` to ``INSTALLED_APPS`` in your ``settings.py`` file. Then, 
from the command line run:

    python manage.py syncdb

Basic Usage:
------------

    >>> from djangobayes.filter import filter
    >>> score = filter.score('some text')
    >>> if score < 0.3:
    ...     # do something with spam
    ... elif score > 0.8:
    ...     # do something with ham
    ... else:
    ...     # unsure - do something else

Of course, this will only work if SpamBayes has been trained. To train do:

    >>> filter.train('some spam', True)
    >>> filter.store()
    >>> filter.train('some ham', False)
    >>> filter.store()

In some situations you may want to filter based on more than a single body 
of text. For example, an author's name, e-mail address, IP address, etc. As 
SpamBayes is intended for filtering e-mail, you can pass in a message object 
rather than a plain string. DjangoBayes provides a handy shortcut, 
``build_msg`` which excepts a ``body`` and any keywords you provide to build 
a message. For example:

    >>> from djangobayes.filter import build_msg
    >>> msg = build_msg('some text', author='Bob', email='bob@example.com')
    >>> score = filter.score(msg)
    >>> # or ...
    >>> msg = build_msg('body text', **{'name' : 'Sue', 'ip' : '127.0.0.1'})
    >>> filter.train(msg)
    >>> filter.store()

As far as I can tell, SpamBayes doesn't really care what the names of the 
keywords are as long as they are consistent throughout your app. It simply 
sees them as e-mail headers and doesn't give any particular headers more 
weight than others. That's why the primary text _must_ be passed in 
separately.

As this is a SpamBayes API, see the SpamBayes documentation (and read the 
code) for more information.
